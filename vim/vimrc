set nocompatible
syntax on
filetype plugin indent on

set nomodeline
set hidden
set wildmenu
set hlsearch
set ignorecase
set smartcase
set backspace=indent,eol,start
set autoindent
set nostartofline
set confirm
set visualbell
set t_vb=
set mouse=a
set cmdheight=1
set notimeout ttimeout ttimeoutlen=10
set shiftwidth=4
set softtabstop=4
set expandtab
set number relativenumber
set ff=unix
set noshowmode
set noruler
set laststatus=0
set noshowcmd

" Set C specific options
autocmd FileType c setlocal shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType cpp setlocal shiftwidth=4 tabstop=4 noexpandtab

" Nix specific options
autocmd FileType nix setlocal shiftwidth=2 tabstop=2

" Set leader to space
let mapleader = "\<Space>"

" Map yanking, pasting and deleting to system clipboard
map <leader>y "+y
map <leader>Y "+Y
map <leader>p "+p
map <leader>P "+P
map <leader>d "+d
map <leader>D "+D

" Formatting
nmap <leader>fj :%!jq<CR>
nmap <leader>fx :%!xmllint --format -<CR>
nmap <leader>fn mm:%!nixfmt<CR>'mzz
vmap <leader>fj !jq<CR>
vmap <leader>fx !xmllint --format -<CR>

" File commands
map <leader>q :q<CR>
map <leader>w :w<CR>
map <leader>x :x<CR>
map <leader>j :e #<CR>
nmap <leader>s :%s/
vmap <leader>s :s/

" ctags
map <leader>td <C-]>
map <leader>th <C-w><C-]>
map <leader>tl g]
map <leader>tj <C-t>

" Decimal to binary, hex and octal conversions
" Match all numbers in the current line and prompt for confirmation
map <leader>cb :s/\d\+/\=printf("0b%b", submatch(0))/gc<CR>
map <leader>co :s/\d\+/\=printf("0o%o", submatch(0))/gc<CR>
map <leader>cx :s/\d\+/\=printf("0x%x", submatch(0))/gc<CR>

" xxd
nmap <leader>e :%!xxd<CR>
nmap <leader>r :%!xxd -r<CR>
vmap <leader>e !xxd<CR>
vmap <leader>r !xxd -r<CR>

" Run norm command
map <C-n> :norm<Space>

" Repeat last macro && ex command
map <leader>. @@
map <leader>, @:

" Set breakpoints
nmap <leader>di O__asm__ volatile ("int3");<Esc>j
nmap <leader>dI o__asm__ volatile ("int3");<Esc>k
nmap <leader>db O__asm__ volatile ("brk 0");<Esc>j
nmap <leader>dB o__asm__ volatile ("brk 0");<Esc>k
nmap <leader>dp Oimport pdb; pdb.set_trace()<Esc>j
nmap <leader>dP oimport pdb; pdb.set_trace()<Esc>k

" Convert strace execve line into the corresponding command in place
let @s = 'ds"f,x'
nmap <leader>cc 0f(yi[Vp100@s

" Other snippets
nmap <leader>` o```<CR>```<Esc>O

" Faster navigation
map J }
map K {
map H b
map L w

" Jumplist navigation
map <C-j> <C-o>
map <C-k> <C-i>

" Netrw
map <leader>cd :Explore<CR>
let g:netrw_banner = 0
hi! link netrwMarkFile Search

function! NetrwMapping()
    " Marks
    nmap <buffer> <TAB> mf
    vmap <buffer> <TAB> :norm mf<CR>
    vmap <buffer> mf :norm mf<CR>
    nmap <buffer> <Leader><TAB> mu
    " Dotfiles
    nmap <buffer> . gh
    " Navigation
    nmap <buffer> h -^
    nmap <buffer> l <CR>
    " Files
    map <buffer> fd D
    nmap <buffer> ff %:w<CR>:buffer #<CR>
    nmap <buffer> fe R
    nmap <buffer> fc mtmc
    nmap <buffer> fm mtmm
    nmap <buffer> fx mx
    nmap <buffer> fl :echo join(netrw#Expose("netrwmarkfilelist"), "\n")<CR>
endfunction
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

" Set sensible navigation repeat directions
noremap , ;
noremap ; ,

" Remove all trailing whitespaces and clear highlighting
map <silent> <C-l> :%s/\s\+$//e<CR>:noh<CR>
